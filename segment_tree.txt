
ll arr[mxN];

ll tree[mxN*3];

void init(ll node,ll b,ll e)
{
    if(b==e)
    {
        tree[node]=arr[b];
        return ;
    }

    ll left=node*2;
    ll right=node*2+1;

    ll mid=(b+e)/2;

    init(left,b,mid);
    init(right,mid+1,e);

    tree[node]=tree[left]+tree[right];

}


ll query(ll node,ll b,ll e,ll i,ll j)
{
    if(i>e||j<b)
        return 0;
    if(b>=i&&e<=j)
         return tree[node];

    ll left=node*2;
    ll right=node*2+1;
    ll mid=(b+e)/2;

    ll p1=query(left,b,mid,i,j);
    ll p2=query(right,mid+1,e,i,j);

    return p1+p2;

}


void update(ll node,ll b,ll e,ll i,ll value)
{
    if(i>e||i<b)
        return ;
    if(b>=i&&e<=i)
    {
        tree[node]=value;
        return ;
    }

    ll left=node*2;
    ll right=node*2+1;
    ll mid=(b+e)>>1;

    update(left,b,mid,i,value);
    update(right,mid+1,e,i,value);

    tree[node]=tree[left]+tree[right];

}

